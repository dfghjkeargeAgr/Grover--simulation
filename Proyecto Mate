
"""Proyecto Mate

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJ9SqE-sI0kdql7GyyweT7JVgODz4Y2X
"""

from qiskit_ibm_runtime import QiskitRuntimeService

# Guarda tu API Key (reemplaza "TU_API_KEY" con tu clave real)
QiskitRuntimeService.save_account("e0d6a58f797f30bd4d7c885d2030f0cfd8de4ff6847dd68d8d69b8d9d98d4ac269baeafd351144850be8a9a1cf6bc76556d4d00192a00f203ad16760e500be6b", overwrite=True, channel="ibm_quantum")

# Cargar el servicio
service = QiskitRuntimeService()

# Verificar backends disponibles
print("Backends disponibles:", [backend.name for backend in service.backends()])

!pip install cirq
!pip install qiskit
!pip install qiskit-ibm-runtime

import numpy as np
import cirq
import matplotlib.pyplot as plt

# Solicitar el número de qubits
num_qubits = int(input("Ingrese el número de qubits (máx 8 para simulación rápida): "))
num_qubits = min(num_qubits, 8)  # Limite a 8 qubits para evitar problemas de rendimiento

# Solicitar el número de iteraciones
iterations = int(input("Ingrese el número de iteraciones de Grover: "))

target_index = np.random.randint(0, 2**num_qubits)
print(f"Buscando el índice: {target_index}")

def grover_circuit(n, target_index, iterations):
    qubits = [cirq.LineQubit(i) for i in range(n)]
    circuit = cirq.Circuit()

    # Aplicar Hadamard a todos los qubits
    circuit.append(cirq.H(q) for q in qubits)

    for _ in range(iterations):
        # Oracle (marca el estado objetivo)
        oracle = [cirq.X(q) for q in qubits if target_index & (1 << qubits.index(q)) == 0]
        circuit.append(oracle)
        circuit.append(cirq.Z(qubits[-1]).controlled_by(*qubits[:-1]))
        circuit.append(reversed(oracle))

        # Diffusion Operator (amplifica el estado correcto)
        circuit.append(cirq.H(q) for q in qubits)
        circuit.append(cirq.X(q) for q in qubits)
        circuit.append(cirq.Z(qubits[-1]).controlled_by(*qubits[:-1]))
        circuit.append(cirq.X(q) for q in qubits)
        circuit.append(cirq.H(q) for q in qubits)

    # Medición
    circuit.append(cirq.measure(*qubits, key='result'))
    return circuit

# Ejecutar el algoritmo de Grover
circuit = grover_circuit(num_qubits, target_index, iterations)
simulator = cirq.Simulator()
result = simulator.run(circuit, repetitions=1000)

# Obtener y graficar el histograma
data = result.histogram(key='result')
plt.bar(data.keys(), data.values(), color='blue')
plt.xlabel("Estado medido")
plt.ylabel("Frecuencia")
plt.title("Resultados de la búsqueda cuántica con Grover")
plt.show()

